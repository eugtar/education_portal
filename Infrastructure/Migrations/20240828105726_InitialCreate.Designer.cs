// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240828105726_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("Id")
                        .HasName("PK__Articles__3214EC0775559BEE");

                    b.ToTable("Articles", t =>
                        {
                            t.HasTrigger("D_U_Articles");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<bool>("Finished")
                        .HasColumnType("bit");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<decimal>("Progress")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Courses__3214EC078E2A3D18");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("Courses", t =>
                        {
                            t.HasTrigger("D_U_Courses");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Domain.Entities.Ebook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("Format")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("PageAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("Id")
                        .HasName("PK__EBooks__3214EC07AB1317D4");

                    b.HasIndex("Format");

                    b.ToTable("EBooks", null, t =>
                        {
                            t.HasTrigger("D_U_EBooks");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Domain.Entities.Format", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Format1")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Format");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("Id")
                        .HasName("PK__Formats__3214EC070CEC5852");

                    b.ToTable("Formats", t =>
                        {
                            t.HasTrigger("D_U_Formats");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Domain.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("Id")
                        .HasName("PK__Lessons__3214EC0797457F0C");

                    b.ToTable("Lessons", t =>
                        {
                            t.HasTrigger("D_U_Lessons");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Domain.Entities.Quality", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Quality1")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Quality");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("Id")
                        .HasName("PK__Qualitie__3214EC072A1AE5CC");

                    b.ToTable("Qualities", t =>
                        {
                            t.HasTrigger("D_U_Qualities");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Domain.Entities.Reward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("Id")
                        .HasName("PK__Rewards__3214EC072569389F");

                    b.HasIndex(new[] { "Name" }, "UQ__Rewards__737584F69D207591")
                        .IsUnique();

                    b.ToTable("Rewards", t =>
                        {
                            t.HasTrigger("D_U_Rewards");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Domain.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("RewardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Skills__3214EC07BBF87B0B");

                    b.HasIndex("RewardId");

                    b.HasIndex("UserId");

                    b.ToTable("Skills", t =>
                        {
                            t.HasTrigger("D_U_Skills");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("Id")
                        .HasName("PK__Users__3214EC07C1BC0D8D");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D105342144E1D5")
                        .IsUnique();

                    b.ToTable("Users", t =>
                        {
                            t.HasTrigger("D_U_Users");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Domain.Entities.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<TimeOnly>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("Quality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.HasKey("Id")
                        .HasName("PK__Videos__3214EC076F6F5848");

                    b.HasIndex("Quality");

                    b.ToTable("Videos", t =>
                        {
                            t.HasTrigger("D_U_Videos");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("LessonArticle", b =>
                {
                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.HasKey("LessonId", "ArticleId")
                        .HasName("PK__LessonAr__29428BDE00EB3234");

                    b.HasIndex("ArticleId");

                    b.ToTable("LessonArticle", (string)null);
                });

            modelBuilder.Entity("LessonEbook", b =>
                {
                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("EbookId")
                        .HasColumnType("int")
                        .HasColumnName("EBookId");

                    b.HasKey("LessonId", "EbookId")
                        .HasName("PK__LessonEB__47441B8FD5F2B363");

                    b.HasIndex("EbookId");

                    b.ToTable("LessonEBook", (string)null);
                });

            modelBuilder.Entity("LessonReward", b =>
                {
                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("RewardId")
                        .HasColumnType("int");

                    b.HasKey("LessonId", "RewardId")
                        .HasName("PK__LessonRe__38A1AD8B59E27149");

                    b.HasIndex("RewardId");

                    b.ToTable("LessonReward", (string)null);
                });

            modelBuilder.Entity("LessonVideo", b =>
                {
                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("LessonId", "VideoId")
                        .HasName("PK__LessonVi__0B2AFDF6799ED9DF");

                    b.HasIndex("VideoId");

                    b.ToTable("LessonVideo", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.HasOne("Domain.Entities.Lesson", "Lesson")
                        .WithMany("Courses")
                        .HasForeignKey("LessonId")
                        .IsRequired()
                        .HasConstraintName("FK__Courses__LessonI__6383C8BA");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Courses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Courses__UserId__628FA481");

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Ebook", b =>
                {
                    b.HasOne("Domain.Entities.Format", "FormatNavigation")
                        .WithMany("Ebooks")
                        .HasForeignKey("Format")
                        .IsRequired()
                        .HasConstraintName("FK__EBooks__Format__4AB81AF0");

                    b.Navigation("FormatNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Skill", b =>
                {
                    b.HasOne("Domain.Entities.Reward", "Reward")
                        .WithMany("Skills")
                        .HasForeignKey("RewardId")
                        .IsRequired()
                        .HasConstraintName("FK__Skills__RewardId__6A30C649");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Skills")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Skills__UserId__693CA210");

                    b.Navigation("Reward");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Video", b =>
                {
                    b.HasOne("Domain.Entities.Quality", "QualityNavigation")
                        .WithMany("Videos")
                        .HasForeignKey("Quality")
                        .IsRequired()
                        .HasConstraintName("FK__Videos__UpdatedA__4316F928");

                    b.Navigation("QualityNavigation");
                });

            modelBuilder.Entity("LessonArticle", b =>
                {
                    b.HasOne("Domain.Entities.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .IsRequired()
                        .HasConstraintName("FK__LessonArt__Artic__08B54D69");

                    b.HasOne("Domain.Entities.Lesson", null)
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .IsRequired()
                        .HasConstraintName("FK__LessonArt__Lesso__07C12930");
                });

            modelBuilder.Entity("LessonEbook", b =>
                {
                    b.HasOne("Domain.Entities.Ebook", null)
                        .WithMany()
                        .HasForeignKey("EbookId")
                        .IsRequired()
                        .HasConstraintName("FK__LessonEBo__EBook__0A9D95DB");

                    b.HasOne("Domain.Entities.Lesson", null)
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .IsRequired()
                        .HasConstraintName("FK__LessonEBo__Lesso__09A971A2");
                });

            modelBuilder.Entity("LessonReward", b =>
                {
                    b.HasOne("Domain.Entities.Lesson", null)
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .IsRequired()
                        .HasConstraintName("FK__LessonRew__Lesso__0B91BA14");

                    b.HasOne("Domain.Entities.Reward", null)
                        .WithMany()
                        .HasForeignKey("RewardId")
                        .IsRequired()
                        .HasConstraintName("FK__LessonRew__Rewar__0C85DE4D");
                });

            modelBuilder.Entity("LessonVideo", b =>
                {
                    b.HasOne("Domain.Entities.Lesson", null)
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .IsRequired()
                        .HasConstraintName("FK__LessonVid__Lesso__0D7A0286");

                    b.HasOne("Domain.Entities.Video", null)
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .IsRequired()
                        .HasConstraintName("FK__LessonVid__Video__0E6E26BF");
                });

            modelBuilder.Entity("Domain.Entities.Format", b =>
                {
                    b.Navigation("Ebooks");
                });

            modelBuilder.Entity("Domain.Entities.Lesson", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Domain.Entities.Quality", b =>
                {
                    b.Navigation("Videos");
                });

            modelBuilder.Entity("Domain.Entities.Reward", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
